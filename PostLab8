// Autor: Johann Haeussler 21223
// Microcontrolador: PIC16F887
// PostLab8

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)
// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

#include <xc.h>
#include <stdio.h>
#include <stdint.h>


//definicion de frecuencia para delay
#define _XTAL_FREQ 1000000  // Frecuencia para delays de 1MHz

//variables globales
int state_flag = 0;         //bandera para el estado en edicion
uint8_t pot1;               //variable para leer potenciometro
uint8_t opt_sel;            //variable para almacenar opcion seleccionada
uint8_t portb_char;         //variable para almacenar valor dado por interfaz
unsigned char vacio = '\r'; //variable con caracter de enter para formatear texto

//funciones proto
void setup(void);       //funcion setup
void item_list(void);   //funcion para menu principal
void enter(int a);      //funcion para colocar una cantidad establecida de enters

//configuracion principal
void setup(void){
    ANSEL = 0b00000001; 
    ANSELH = 0;
    
    TRISA = 0b00000001;
    TRISB = 0;
    PORTA = 0; 
    PORTB = 0; 
    
    //config de interrupciones
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
    PIR1bits.ADIF = 0;
    PIE1bits.ADIE = 1;
    
    //OSCCON
    OSCCONbits.IRCF = 0b0100;
    OSCCONbits.SCS = 1;
    
    //config ADC
    ADCON0bits.ADCS = 0b01;
    ADCON1bits.VCFG0 = 0;
    ADCON1bits.VCFG1 = 0;
    
    ADCON0bits.CHS = 0b0000;
    ADCON1bits.ADFM = 0;
    ADCON0bits.ADON = 1;
    __delay_us(40);
    
    //config serial 
    TXSTAbits.SYNC = 0;
    TXSTAbits.BRGH = 1;
    BAUDCTLbits.BRG16 = 1;
    SPBRGH = 0;
    SPBRG = 25;
    RCSTAbits.SPEN = 1;
    TXSTAbits.TXEN = 1;
    RCSTAbits.CREN = 1;
    PIE1bits.RCIE = 1;
}

                        //funcion para enters de cantidad especifica
void enter(int a){      // función "enter" con un parámetro de entrada "a" de tipo entero
    while(a>0){         // mientras el valor de "a" sea mayor que cero
        a--;            // el valor de "a" se decrementa en uno.
        __delay_ms(40); //esperar 40 milisegundos antes de continuar 
        TXREG = vacio;  //El valor que se envía es el contenido de la variable "vacio",
    }
}

//funcion de impresion
void tprint(char *string){      // define la función "tprint" con un parámetro de entrada "string" de tipo puntero
    while(*string != '\0'){     // mientras el valor apuntado por "string" no sea el caracter nulo '\0
        while(TXIF != 1);       //indicador de interrupción que se activa cuando el registro de transmisión TXREG está vacío
        TXREG = *string;        // valor apuntado por "string" a través del registro de transmisión (TXREG) 
        *string++;              // a incrementa el valor del puntero "string
    }
}

//interrupciones
void __interrupt() isr(void){       //define la función de interrupción
    if (PIR1bits.ADIF){             // verifica si la bandera de interrupción "ADIF" del registro PIR1 está activada
        if (ADCON0bits.CHS == 0){   // verifica si el canal de entrada analógico de la conversión ADC está configurado en 0. 
            pot1 = ADRESH;          // Guarda el valor de 8 bits más significativo de la conversion pot1.
        }
        PIR1bits.ADIF = 0;          // Limpia la bandera de interrupción "ADIF"
    }
    if(RCIF){                       // Si la bandera de interrupción "RCIF" del registro PIR1 está activada
        if(state_flag == 0){        // verifica si la variable "state_flag" es igual a 0
            opt_sel = RCREG;        // Si es así, guarda el valor recibido a través de "RCREG" en la variable "opt_sel" 
            RCREG = 0;              // Limpia el registro de recepción "RCREG"
        }
        else if (state_flag == 1){  // Verifica si la variable "state_flag" es igual a 1
            state_flag = 0;         // Si es así, establece "state_flag" en 0 
            portb_char = RCREG;     //  Y guarda el valor recibido a través de "RCREG" en la variable "portb_char"
            TXREG = portb_char;     // Envía el valor de "portb_char" a través del registro de transmisión (TXREG),
            PORTB = portb_char;     // Lo guarda en el puerto B del microcontrolador (PORTB) 
            RCREG = 0;              // Limpia el registro de recepción "RCREG".
            enter(1);               // Llama a la función "enter" con un valor de 1 como argumento
            item_list();            // Luego llama a la función "item_list".
        }
    }
    return;
}

void main(void){                    // Define la función principal del programa 
    //config ejecutar
    setup();                        //llaman a las funciones "setup" e "item_list" 
    item_list();
    
    //loop main
    while(1){
        if (ADCON0bits.GO == 0){    // Verifica si la bandera "GO" del registro "ADCON0" del convertidor analógico a digital está en 0,
            ADCON0bits.GO = 1;      // Establece la bandera "GO" en 1 para iniciar una nueva conversión.
        }
        if (opt_sel == 0x61){       // Verifica si la variable "opt_sel" es igual a 0x61.
            opt_sel = 0x00;         // Establece "opt_sel" en 0
            
            tprint("Valor del potenciometro: ");   // Muestra un mensaje en el terminal utilizando la función "tprint
            __delay_ms(500);                       // Espera durante 500 milisegundos con la función "__delay_ms"
            TXREG = pot1;                          // Envía el valor de la variable "pot1" a través del registro de transmisión (TXREG),
            __delay_ms(500);                       // Espera otros 500 milisegundos
            item_list();                           // Llama a la función "item_list" para mostrar una lista de opciones en el terminal
        }
        else if (opt_sel == 0x62){                 // si la variable "opt_sel" es igual a 0x62
            state_flag = 1;                        // variable "state_flag" en 1,
            tprint("Ingrese caracter en ASCII: "); // muestra un mensaje en el terminal utilizando la función "tprint"
            opt_sel = 0x00;                        // Establece "opt_sel" en 0
        }
    }
    return;
}

//menu en hiperterminal
void item_list(){                            // Define una función llamada "item_list"
    enter(2);                                // inserta dos líneas en blanco en el terminal.
    tprint("---------MAIN MENU----------");
    enter(1);                                // inserta una líneaa en blanco en el terminal.
    tprint("a. Valor ASCII según potenciometro");
    enter(1);                                // inserta una línea en blanco en el terminal.
    tprint("b. Valor del contador según caracter");
    enter(2);                                // inserta dos líneas en blanco en el terminal.    
}
